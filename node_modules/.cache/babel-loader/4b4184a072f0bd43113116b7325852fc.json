{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport axios from 'axios';\n\nfunction my(url, options) {\n  const req = axios({\n    method: options.method,\n    url: url,\n    baseURL: 'https://some-domain.com/api/',\n    // 用于拼接url前\n    data: options.data,\n    params: options.param,\n    headers: {\n      'X-Requested-With': 'XMLHttpRequest'\n    }\n  }).then(function (response) {\n    console.log(\"response\", response);\n  }).catch(function (error) {\n    console.log(\"erroe\", error);\n  });\n  return req;\n}\n\nconst _default = my;\nexport default _default; // exports.default = function (url, options) {\n//     return (0, axios)(_extends({\n//         method: options.method,\n//         url: url,\n//         data: options.data,\n//         params: options.param,\n//         headers: { 'X-Requested-With': 'XMLHttpRequest' },\n//         showLoading: true\n//     }, options)).catch(function (err) {\n//         console.log(err);\n//         if (err.response && err.response.status == 401) {\n//             // (0, _index.Error)(err.response.data && err.response.data.msg);\n//             return;\n//         } else if (err.response && err.response.status == 306) {\n//             // top.location.href = '/wbalone/pages/login/login.html?r=L3BvcnRhbC8';\n//             return;\n//         } else {\n//             return;\n//         }\n//     });\n// };\n// axios.defaults.timeout = 40000;\n// axios.interceptors.request.use(function (config) { //请求拦截器\n//     if (config.showLoading) {\n//         // (0, _index.toast)({ show: true });\n//     }\n//     return config;\n// }, function (error) {\n//     return _promise.reject(error);\n// });\n// axios.interceptors.response.use(function (config) {  //相应拦截器\n//     // (0, _index.toast)({ show: false });\n//     return config;\n// }, function (error) {\n//     // (0, _index.toast)({ show: false });\n//     if (error && error.response) {\n//         switch (error.response.status) {\n//             case 400:\n//                 error.message = '错误请求';\n//                 break;\n//             case 401:\n//                 error.message = '未授权，请重新登录';\n//                 break;\n//             case 403:\n//                 error.message = '拒绝访问';\n//                 break;\n//             case 404:\n//                 error.message = '请求错误,未找到该资源';\n//                 break;\n//             case 405:\n//                 error.message = '请求方法未允许';\n//                 break;\n//             case 408:\n//                 error.message = '请求超时';\n//                 break;\n//             case 500:\n//                 error.message = '服务器端出错';\n//                 break;\n//             case 501:\n//                 error.message = '网络未实现';\n//                 break;\n//             case 502:\n//                 error.message = '网络错误';\n//                 break;\n//             case 503:\n//                 error.message = '服务不可用';\n//                 break;\n//             case 504:\n//                 error.message = '网络超时';\n//                 break;\n//             case 505:\n//                 error.message = 'http版本不支持该请求';\n//                 break;\n//             default:\n//                 error.message = \"\\u8FDE\\u63A5\\u9519\\u8BEF\" + error.response.status;\n//         }\n//     } else {\n//         error.message = \"连接到服务器失败\";\n//     }\n//     //    (error.message);\n//     return _promise.reject(error);\n// });\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(my, \"my\", \"/Users/admin/Desktop/\\u9E64\\u5F71/newapp/src/request.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/admin/Desktop/\\u9E64\\u5F71/newapp/src/request.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/admin/Desktop/鹤影/newapp/src/request.js"],"names":["axios","my","url","options","req","method","baseURL","data","params","param","headers","then","response","console","log","catch","error"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,SAASC,EAAT,CAAYC,GAAZ,EAAiBC,OAAjB,EAA0B;AACtB,QAAMC,GAAG,GAAGJ,KAAK,CAAC;AACdK,IAAAA,MAAM,EAAEF,OAAO,CAACE,MADF;AAEdH,IAAAA,GAAG,EAAEA,GAFS;AAGdI,IAAAA,OAAO,EAAE,8BAHK;AAG4B;AAC1CC,IAAAA,IAAI,EAAEJ,OAAO,CAACI,IAJA;AAKdC,IAAAA,MAAM,EAAEL,OAAO,CAACM,KALF;AAMdC,IAAAA,OAAO,EAAE;AAAE,0BAAoB;AAAtB;AANK,GAAD,CAAL,CAOTC,IAPS,CAOJ,UAAUC,QAAV,EAAoB;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AACH,GATW,EASTG,KATS,CASH,UAAUC,KAAV,EAAiB;AACtBH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB;AACH,GAXW,CAAZ;AAYA,SAAOZ,GAAP;AACH;;iBAEcH,E;AAAf,wB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;0BAtGSA,E","sourcesContent":["\nimport axios from 'axios';\nfunction my(url, options) {\n    const req = axios({\n        method: options.method,\n        url: url,\n        baseURL: 'https://some-domain.com/api/',  // 用于拼接url前\n        data: options.data,\n        params: options.param,\n        headers: { 'X-Requested-With': 'XMLHttpRequest' },\n    }).then(function (response) {\n        console.log(\"response\", response);\n    }).catch(function (error) {\n        console.log(\"erroe\", error);\n    })\n    return req;\n}\n\nexport default my;\n\n// exports.default = function (url, options) {\n//     return (0, axios)(_extends({\n//         method: options.method,\n//         url: url,\n//         data: options.data,\n//         params: options.param,\n//         headers: { 'X-Requested-With': 'XMLHttpRequest' },\n//         showLoading: true\n//     }, options)).catch(function (err) {\n//         console.log(err);\n//         if (err.response && err.response.status == 401) {\n//             // (0, _index.Error)(err.response.data && err.response.data.msg);\n//             return;\n//         } else if (err.response && err.response.status == 306) {\n//             // top.location.href = '/wbalone/pages/login/login.html?r=L3BvcnRhbC8';\n//             return;\n//         } else {\n//             return;\n//         }\n//     });\n// };\n\n// axios.defaults.timeout = 40000;\n\n// axios.interceptors.request.use(function (config) { //请求拦截器\n//     if (config.showLoading) {\n//         // (0, _index.toast)({ show: true });\n//     }\n//     return config;\n// }, function (error) {\n//     return _promise.reject(error);\n// });\n\n// axios.interceptors.response.use(function (config) {  //相应拦截器\n//     // (0, _index.toast)({ show: false });\n//     return config;\n// }, function (error) {\n//     // (0, _index.toast)({ show: false });\n//     if (error && error.response) {\n//         switch (error.response.status) {\n//             case 400:\n//                 error.message = '错误请求';\n//                 break;\n//             case 401:\n//                 error.message = '未授权，请重新登录';\n//                 break;\n//             case 403:\n//                 error.message = '拒绝访问';\n//                 break;\n//             case 404:\n//                 error.message = '请求错误,未找到该资源';\n//                 break;\n//             case 405:\n//                 error.message = '请求方法未允许';\n//                 break;\n//             case 408:\n//                 error.message = '请求超时';\n//                 break;\n//             case 500:\n//                 error.message = '服务器端出错';\n//                 break;\n//             case 501:\n//                 error.message = '网络未实现';\n//                 break;\n//             case 502:\n//                 error.message = '网络错误';\n//                 break;\n//             case 503:\n//                 error.message = '服务不可用';\n//                 break;\n//             case 504:\n//                 error.message = '网络超时';\n//                 break;\n//             case 505:\n//                 error.message = 'http版本不支持该请求';\n//                 break;\n//             default:\n//                 error.message = \"\\u8FDE\\u63A5\\u9519\\u8BEF\" + error.response.status;\n//         }\n//     } else {\n//         error.message = \"连接到服务器失败\";\n//     }\n//     //    (error.message);\n//     return _promise.reject(error);\n// });"]},"metadata":{},"sourceType":"module"}