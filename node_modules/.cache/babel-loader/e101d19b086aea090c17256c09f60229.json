{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\n// exports.UPLOAD_FILE_URL = undefined;\n// \n// var _assign = require(\"babel-runtime/core-js/object/assign\");\n// var _assign2 = _interopRequireDefault(_assign);\nimport axios from 'axios';\n\nvar _promise = require(\"babel-runtime/core-js/promise\"); // var _promise2 = _interopRequireDefault(_promise);\n\n\nvar _extends = function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // var _index = require(\"./index\");\n// function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\nfunction my(url, options) {\n  const req = axios.create({\n    method: options.method,\n    url: url,\n    data: options.data,\n    params: options.param,\n    headers: {\n      'X-Requested-With': 'XMLHttpRequest'\n    },\n    showLoading: true\n  }).then(function (response) {\n    console.log(\"response\", response);\n  }).catch(function (error) {\n    console.log(\"erroe\", error);\n  }); // req.defaults.timeout = 40000;\n  // req.interceptors.request.use(function (config) { //请求拦截器\n  //   console.log(\"config\",config);\n  //     return config;\n  // }, function (error) {\n  //     console.log(\"error\",error);\n  //     return _promise.reject(error);\n  // });\n  // req.interceptors.response.use(function (config) {  //相应拦截器\n  //     // (0, _index.toast)({ show: false });\n  //     console.log(\"config\",config);\n  //     return config;\n  // }, function (error) {\n  //     console.log(\"error\",error);\n  //     // (0, _index.toast)({ show: false });\n  //     if (error && error.response) {\n  //         switch (error.response.status) {\n  //             case 400:\n  //                 error.message = '错误请求';\n  //                 break;\n  //             case 401:\n  //                 error.message = '未授权，请重新登录';\n  //                 break;\n  //             case 403:\n  //                 error.message = '拒绝访问';\n  //                 break;\n  //             case 404:\n  //                 error.message = '请求错误,未找到该资源';\n  //                 break;\n  //             case 405:\n  //                 error.message = '请求方法未允许';\n  //                 break;\n  //             case 408:\n  //                 error.message = '请求超时';\n  //                 break;\n  //             case 500:\n  //                 error.message = '服务器端出错';\n  //                 break;\n  //             case 501:\n  //                 error.message = '网络未实现';\n  //                 break;\n  //             case 502:\n  //                 error.message = '网络错误';\n  //                 break;\n  //             case 503:\n  //                 error.message = '服务不可用';\n  //                 break;\n  //             case 504:\n  //                 error.message = '网络超时';\n  //                 break;\n  //             case 505:\n  //                 error.message = 'http版本不支持该请求';\n  //                 break;\n  //             default:\n  //                 error.message = \"\\u8FDE\\u63A5\\u9519\\u8BEF\" + error.response.status;\n  //         }\n  //     } else {\n  //         error.message = \"连接到服务器失败\";\n  //     }\n  //     //    (error.message);\n  //     return _promise.reject(error);\n  // });\n  // console.log(\"req\", req);\n\n  return req;\n}\n\nconst _default = my;\nexport default _default; // exports.default = function (url, options) {\n//     return (0, axios)(_extends({\n//         method: options.method,\n//         url: url,\n//         data: options.data,\n//         params: options.param,\n//         headers: { 'X-Requested-With': 'XMLHttpRequest' },\n//         showLoading: true\n//     }, options)).catch(function (err) {\n//         console.log(err);\n//         if (err.response && err.response.status == 401) {\n//             // (0, _index.Error)(err.response.data && err.response.data.msg);\n//             return;\n//         } else if (err.response && err.response.status == 306) {\n//             // top.location.href = '/wbalone/pages/login/login.html?r=L3BvcnRhbC8';\n//             return;\n//         } else {\n//             return;\n//         }\n//     });\n// };\n// axios.defaults.timeout = 40000;\n// axios.interceptors.request.use(function (config) { //请求拦截器\n//     if (config.showLoading) {\n//         // (0, _index.toast)({ show: true });\n//     }\n//     return config;\n// }, function (error) {\n//     return _promise.reject(error);\n// });\n// axios.interceptors.response.use(function (config) {  //相应拦截器\n//     // (0, _index.toast)({ show: false });\n//     return config;\n// }, function (error) {\n//     // (0, _index.toast)({ show: false });\n//     if (error && error.response) {\n//         switch (error.response.status) {\n//             case 400:\n//                 error.message = '错误请求';\n//                 break;\n//             case 401:\n//                 error.message = '未授权，请重新登录';\n//                 break;\n//             case 403:\n//                 error.message = '拒绝访问';\n//                 break;\n//             case 404:\n//                 error.message = '请求错误,未找到该资源';\n//                 break;\n//             case 405:\n//                 error.message = '请求方法未允许';\n//                 break;\n//             case 408:\n//                 error.message = '请求超时';\n//                 break;\n//             case 500:\n//                 error.message = '服务器端出错';\n//                 break;\n//             case 501:\n//                 error.message = '网络未实现';\n//                 break;\n//             case 502:\n//                 error.message = '网络错误';\n//                 break;\n//             case 503:\n//                 error.message = '服务不可用';\n//                 break;\n//             case 504:\n//                 error.message = '网络超时';\n//                 break;\n//             case 505:\n//                 error.message = 'http版本不支持该请求';\n//                 break;\n//             default:\n//                 error.message = \"\\u8FDE\\u63A5\\u9519\\u8BEF\" + error.response.status;\n//         }\n//     } else {\n//         error.message = \"连接到服务器失败\";\n//     }\n//     //    (error.message);\n//     return _promise.reject(error);\n// });\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_extends, \"_extends\", \"/Users/admin/Desktop/\\u9E64\\u5F71/newapp/src/request.js\");\n  reactHotLoader.register(my, \"my\", \"/Users/admin/Desktop/\\u9E64\\u5F71/newapp/src/request.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/admin/Desktop/\\u9E64\\u5F71/newapp/src/request.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/admin/Desktop/鹤影/newapp/src/request.js"],"names":["axios","_promise","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","my","url","options","req","create","method","data","params","param","headers","showLoading","then","response","console","log","catch","error"],"mappings":";;;;;;;;;AAGA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,+BAAD,CAAtB,C,CAEA;;;AAEA,IAAIC,QAAQ,GAAG,UAAUC,MAAV,EAAkB;AAC7B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACvC,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AACA,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AACpB,UAAIE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AACnDL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AACH;AACJ;AACJ;;AAAC,SAAOL,MAAP;AACL,CATD,C,CAeA;AAEA;;;AACA,SAASU,EAAT,CAAYC,GAAZ,EAAiBC,OAAjB,EAA0B;AACtB,QAAMC,GAAG,GAAGjB,KAAK,CAACkB,MAAN,CAAa;AACrBC,IAAAA,MAAM,EAAEH,OAAO,CAACG,MADK;AAErBJ,IAAAA,GAAG,EAAEA,GAFgB;AAGrBK,IAAAA,IAAI,EAAEJ,OAAO,CAACI,IAHO;AAIrBC,IAAAA,MAAM,EAAEL,OAAO,CAACM,KAJK;AAKrBC,IAAAA,OAAO,EAAE;AAAE,0BAAoB;AAAtB,KALY;AAMrBC,IAAAA,WAAW,EAAE;AANQ,GAAb,EAQXC,IARW,CAQN,UAAUC,QAAV,EAAoB;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AACH,GAVW,EAUTG,KAVS,CAUH,UAAUC,KAAV,EAAiB;AACtBH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB;AACH,GAZW,CAAZ,CADsB,CAiBtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOb,GAAP;AACH;;iBAEcH,E;AAAf,wB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;0BA7LIX,Q;0BAkBKW,E","sourcesContent":["\n\n\n// exports.UPLOAD_FILE_URL = undefined;\n// \n// var _assign = require(\"babel-runtime/core-js/object/assign\");\n\n// var _assign2 = _interopRequireDefault(_assign);\nimport axios from 'axios';\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\n// var _promise2 = _interopRequireDefault(_promise);\n\nvar _extends = function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    } return target;\n};\n\n\n\n\n\n// var _index = require(\"./index\");\n\n// function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction my(url, options) {\n    const req = axios.create({\n        method: options.method,\n        url: url,\n        data: options.data,\n        params: options.param,\n        headers: { 'X-Requested-With': 'XMLHttpRequest' },\n        showLoading: true\n    })\n    .then(function (response) {\n        console.log(\"response\", response);\n    }).catch(function (error) {\n        console.log(\"erroe\", error);\n    })\n\n\n\n    // req.defaults.timeout = 40000;\n\n    // req.interceptors.request.use(function (config) { //请求拦截器\n    //   console.log(\"config\",config);\n    //     return config;\n    // }, function (error) {\n    //     console.log(\"error\",error);\n    //     return _promise.reject(error);\n    // });\n\n    // req.interceptors.response.use(function (config) {  //相应拦截器\n    //     // (0, _index.toast)({ show: false });\n    //     console.log(\"config\",config);\n    //     return config;\n    // }, function (error) {\n    //     console.log(\"error\",error);\n    //     // (0, _index.toast)({ show: false });\n    //     if (error && error.response) {\n    //         switch (error.response.status) {\n    //             case 400:\n    //                 error.message = '错误请求';\n    //                 break;\n    //             case 401:\n    //                 error.message = '未授权，请重新登录';\n    //                 break;\n    //             case 403:\n    //                 error.message = '拒绝访问';\n    //                 break;\n    //             case 404:\n    //                 error.message = '请求错误,未找到该资源';\n    //                 break;\n    //             case 405:\n    //                 error.message = '请求方法未允许';\n    //                 break;\n    //             case 408:\n    //                 error.message = '请求超时';\n    //                 break;\n    //             case 500:\n    //                 error.message = '服务器端出错';\n    //                 break;\n    //             case 501:\n    //                 error.message = '网络未实现';\n    //                 break;\n    //             case 502:\n    //                 error.message = '网络错误';\n    //                 break;\n    //             case 503:\n    //                 error.message = '服务不可用';\n    //                 break;\n    //             case 504:\n    //                 error.message = '网络超时';\n    //                 break;\n    //             case 505:\n    //                 error.message = 'http版本不支持该请求';\n    //                 break;\n    //             default:\n    //                 error.message = \"\\u8FDE\\u63A5\\u9519\\u8BEF\" + error.response.status;\n    //         }\n    //     } else {\n    //         error.message = \"连接到服务器失败\";\n    //     }\n    //     //    (error.message);\n    //     return _promise.reject(error);\n    // });\n    // console.log(\"req\", req);\n    return req;\n}\n\nexport default my;\n\n// exports.default = function (url, options) {\n//     return (0, axios)(_extends({\n//         method: options.method,\n//         url: url,\n//         data: options.data,\n//         params: options.param,\n//         headers: { 'X-Requested-With': 'XMLHttpRequest' },\n//         showLoading: true\n//     }, options)).catch(function (err) {\n//         console.log(err);\n//         if (err.response && err.response.status == 401) {\n//             // (0, _index.Error)(err.response.data && err.response.data.msg);\n//             return;\n//         } else if (err.response && err.response.status == 306) {\n//             // top.location.href = '/wbalone/pages/login/login.html?r=L3BvcnRhbC8';\n//             return;\n//         } else {\n//             return;\n//         }\n//     });\n// };\n\n// axios.defaults.timeout = 40000;\n\n// axios.interceptors.request.use(function (config) { //请求拦截器\n//     if (config.showLoading) {\n//         // (0, _index.toast)({ show: true });\n//     }\n//     return config;\n// }, function (error) {\n//     return _promise.reject(error);\n// });\n\n// axios.interceptors.response.use(function (config) {  //相应拦截器\n//     // (0, _index.toast)({ show: false });\n//     return config;\n// }, function (error) {\n//     // (0, _index.toast)({ show: false });\n//     if (error && error.response) {\n//         switch (error.response.status) {\n//             case 400:\n//                 error.message = '错误请求';\n//                 break;\n//             case 401:\n//                 error.message = '未授权，请重新登录';\n//                 break;\n//             case 403:\n//                 error.message = '拒绝访问';\n//                 break;\n//             case 404:\n//                 error.message = '请求错误,未找到该资源';\n//                 break;\n//             case 405:\n//                 error.message = '请求方法未允许';\n//                 break;\n//             case 408:\n//                 error.message = '请求超时';\n//                 break;\n//             case 500:\n//                 error.message = '服务器端出错';\n//                 break;\n//             case 501:\n//                 error.message = '网络未实现';\n//                 break;\n//             case 502:\n//                 error.message = '网络错误';\n//                 break;\n//             case 503:\n//                 error.message = '服务不可用';\n//                 break;\n//             case 504:\n//                 error.message = '网络超时';\n//                 break;\n//             case 505:\n//                 error.message = 'http版本不支持该请求';\n//                 break;\n//             default:\n//                 error.message = \"\\u8FDE\\u63A5\\u9519\\u8BEF\" + error.response.status;\n//         }\n//     } else {\n//         error.message = \"连接到服务器失败\";\n//     }\n//     //    (error.message);\n//     return _promise.reject(error);\n// });"]},"metadata":{},"sourceType":"module"}